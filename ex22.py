#БОЛЬШАЯ ЧАСТЬ ПРОБЛЕМ ОТ КОДИРОВКИ!!!

echo "текст в файле" >file_name.txt создаст файл file_name.txt с текстом внутри "текст в файле"


print(f"") выводит на экран текст, если в тексте переменная в {*}, то после скобки 
           ставим "f"
           если в тексте поставить"\n",  то при выводе на экран он будет со следующей строки
           если в тексте поставить"\t",  то при выводе на экран он будет с новой строки(tab)
           подробнее по всем таким приколам в учебнике на 61 странице
           если использовать тройные кавычки, то текста может быть сколь угодно много
           Через запятую можно выводить несколько аргументов, текстов и тдтп
           Если в скобках указать простую формулу без кавычек, то он посчитает и выдаст результат
           Если в скобках написать логическое сравнение, то выдаст "false" или "true"
           если переменным присвоен текст, то их можно вывести без кавычек через знак +
           если нужно повторить вывод одного текста несколько раз в одной строке, то print("@"*10)
           print(txt.read()) - выводит на экран содержимое файла. txt=open(имяфайла)
           #есть еще какой то формат...Форматирование по маске... Только хз что это

input()    служит для ввода данных пользователем
           имяпеременной=input() - присваивает введенные данные переменной "имяпеременной"
           имяпеременной=input("текст") - присваивает введенные данные переменной
            "имяпеременной", еще и "текст" выводит...
int()    присваивает целочисленное значение переменной, допускается ввод только числа...

open(файл) открывает файл. Файл надо было прописать в "argv"
имяпеременной.open() открыть имяпеременной

len(indata) - выдает количество байт в файле
indata = file_1.read() - нужно для чтения файла

def имяпеременной(аргумент1,аргумент2,аргумент99):
    аргумент1="текст первый"
    аргумент2="текст второй"
    print(f"текст{аргумент1},текст {аргумент2}")
        - обьявляет для "имяпеременной" функцию (последовательность действий), и описывает
          эту последовательность

range
функция range{} для ограничения диапазона
x in range(1,10) - переменная х находится в пределах от 1 до 10. 
Можно использовать в if elif else

список = [1, 2, "текст1", "текст2"]:
    присваивает переменной "список" ряд значений через запятую. Обязательно 
    квадратные скобки...


append  - функция для добавления элементов в список
for i in range(3,6):
    print(f"Добавление {i} в список.")
    # append  - функция для добавления элементов в список
    elements.append(i)
    Выводит список от "Добавление 3 в список" до "Добавление 5 в список"


read
имяпеременной.read() - прочитать имяпеременной

Close() - закрыть файл с сохранением
read() - считывает содержимое файла
readline() - считывает только одну строку файла
truncate() - очищает файл, удаляет содержимое
write() - записывает даные в файл
stuff() - "записывает даные в файл" вроде как...
seek(0) - помещает аказатель текущей позиции чтения/записи в начало файла


==  оператор сравнения
=   оператор присвоения

            Имя переменной должно быть с текстом, только цифры не допустимы
            любой переменной можно присвоить любое значение, или формулу в цифрах,
            например txt=open(файл)

            а еще любой переменной можно присвоить значение выполняемых действий с переменными
            а еще любой переменной можно присвоить текст, обязательно в кавычках
            
999.0  если к целому числу добавить .0, то оно превращается в число с плавающей запятой.


from sys import argv
    argv - стандартное имя переменной аргумента
           Говорит питону "из сис импортировать аргв"
           сис - это модуль, или библиотека
                      
           после этой записи гдето надо обьявить переменные, с которыми мы будем работать
           script, first, second, third = argv - это значит, что с этими переменными мы и будем работать
           При этом нам надо ввести при запуске еще и аргументы, которые идут после питона.
           Например python ex13.py first second third

from os.path import exists
     print(f"Целевой файл существует?{exists(file_1)}")  возвращает "true" , если file_1 существует
     или возвращает "false" , если файла нет

from sys import exit импортирует функцию exit, это выход из прогораммы

if переменная чтото там:
    elif переменная стото тут:
    else тогда вообще атас

    # суть в развилке кода. сравниваем, вычисляем, что угодно делаем, а потом в
    # в зависимости от результата делаем одну ветку кода, или другую.
    # Если "чтото там"
        #тогда "чтото тут"
        #иначе "вообще атас"


for number in the_count: #для переменной "number" в "the_count" 
    
the_count = [1, 2, 3]
for number in the_count:
    print(f"Счетчик: {number}")  
    Выводит список вида:
    1
    2
    3

while i < 6:  - Пока i<6 функция будет выполнять какие то действия, потом 
                выполнение кода пойдет дальше. Если условие не выполнится
                 - то будет зацикливание, программа нормально не будет работать





